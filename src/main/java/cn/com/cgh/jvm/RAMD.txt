java
    javac 对 .java -> .class
    javap 以 .class -> 反汇编
        http://cloud.tencent.com/developer/article/1333540

JVM 内存模块:
    垃圾回收 性能调优 JVM自己优化反技术 执行引擎 监控工具 类文件结构 类加载 -> 内存结构
    JVM 内存区域
        java虚拟机 class指令 虚拟内存
        jvm运行时数据区
            线程共享区               线程私有区
            方法区 运行时常量池           线程[虚拟机栈 本地方法栈 程序计数器]
            堆
                        直接内存[堆外内存]

虚拟机栈: 存储当前线程运行java方法所需的 数据,指令,返回地址 StackOverflowError 栈异常
    大小限制 -Xss 默认1M
    栈溢出
    栈帧[ 一个栈帧
        eg: (
            执行引擎的一个工作区
                JVM执行引擎 + 操作数栈 + 栈,堆
            eg: 操作系统
                CPU + 缓存 + 主内存
        )
        局部变量表(八大基础类型, 自定义对象引用),
        操作数栈,
        动态连接,
        完成出口 -> 返回地址
        ]
程序计数器: 记录当前执行的地址偏移量 / 与操作系统上的程序计数器的一个映射
本地方法栈: 虚拟机规范的.

常量池
Class 常量池
运行时常量池
官网没有这个概念:字符串常量池

判断对象的存活
引用计数算法 Class回收条件
可达性分析(根可达)
finalize

可达性分析
根:
静态变量、线程栈变量、常量池、JNI（指针）
虚拟机栈（栈中的本地变量表）中的引用
方法区中类静态属性引用的对象
方法区中常量引用的对象
本地方法栈中JNI（即一般说的Native方法）引用的对象
JVM的内部引用Class引用（class对象异常对象NullPointException、OutofMemoryError，系统类加载器）
所有被同步锁（synchronized关键）持有的对象
JVM内部的JMXBean、JVMTI中注册的回调、本地代码缓存等
JVM实现中的“临时性”对象，跨代引用的对象

注意Class回收条件
要回收class必须同时满足以下条件
1、该类所有的都已经被回收也就是堆中不存在该类的任何实例
2、加载该类的ClassLoader已经被回收
3、该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何通过反射访问该类的方法。
4.参数控制 －Xnoclassgc

Finalize
